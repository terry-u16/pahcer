use anyhow::Result;
use rand::{
    distr::{Alphanumeric, SampleString},
    rng,
};
use std::process::{Command, Output};

/// 現在の変更を一時的なブランチにコミットし、そのブランチ名を返す
pub(super) fn commit(new_branch_name: Option<String>) -> Result<String> {
    let new_branch_name = generate_and_switch_to_new_branch(new_branch_name)?;
    stage_all()?;
    commit_all()?;
    back_branch()?;
    restore_changes(&new_branch_name)?;
    Ok(new_branch_name)
}

/// pahcer関連のブランチを削除する
pub(super) fn prune() -> Result<()> {
    let branches = list_branches("pahcer/*")?;
    let current_branch = get_current_branch_name()?;

    for branch in branches.iter().filter(|b| **b != current_branch) {
        check_return_code(
            Command::new("git")
                .args(&["branch", "-D", branch])
                .output()?,
        )?;

        println!("Deleted branch: {}", branch);
    }

    Ok(())
}

/// 現在のブランチ名を取得する
fn get_current_branch_name() -> Result<String> {
    let current_branch_name = read_stdout(
        Command::new("git")
            .args(&["rev-parse", "--abbrev-ref", "HEAD"])
            .output()?,
    )?;

    Ok(current_branch_name)
}

/// 新しいブランチを生成し、そのブランチに移動する
fn generate_and_switch_to_new_branch(branch_name: Option<String>) -> Result<String> {
    // a-z, A-Z, 0-9の62種類の文字を使って8文字の文字列をランダムに生成する場合、
    // 衝突確率が0.01%以上にするためには20万回の試行が必要となり、十分に安全
    // 衝突しているか判定しても良いのだが、めんどくさいのでやらない
    const NAME_LENGTH: usize = 8;
    let new_branch_name = format!(
        "pahcer/{}",
        branch_name.unwrap_or_else(|| Alphanumeric.sample_string(&mut rng(), NAME_LENGTH))
    );

    check_return_code(
        Command::new("git")
            .args(&["switch", "-c", &new_branch_name])
            .output()?,
    )?;

    Ok(new_branch_name)
}

/// 全てのファイルをステージングする
fn stage_all() -> Result<()> {
    check_return_code(Command::new("git").args(&["add", "--all"]).output()?)?;
    Ok(())
}

/// ステージングされたファイルが存在するならコミットする
fn commit_all() -> Result<()> {
    let diffs = read_stdout(
        Command::new("git")
            .args(&["diff", "--cached", "--name-only"])
            .output()?,
    )?;

    if !diffs.is_empty() {
        check_return_code(
            Command::new("git")
                .args(&["commit", "--message", "automatically generated by pahcer"])
                .output()?,
        )?;
    }

    Ok(())
}

/// 直前のブランチに移動する
fn back_branch() -> Result<()> {
    check_return_code(Command::new("git").args(&["switch", "-"]).output()?)
}

/// 指定されたブランチに移動する
fn switch_branch(current_branch_name: String) -> Result<(), anyhow::Error> {
    check_return_code(
        Command::new("git")
            .args(&["switch", &current_branch_name])
            .output()?,
    )
}

/// カレントブランチに変更を反映する
fn restore_changes(new_branch_name: &String) -> Result<(), anyhow::Error> {
    check_return_code(
        Command::new("git")
            .args(&["restore", "--source", new_branch_name, "--worktree", ":/"])
            .output()?,
    )
}

/// ブランチ名のリストを取得する
fn list_branches(pattern: &str) -> Result<Vec<String>, anyhow::Error> {
    let branches = read_stdout(
        Command::new("git")
            .args(&["branch", "--list", pattern, "--format='%(refname:short)'"])
            .output()?,
    )?;

    Ok(branches.lines().map(|s| s.to_string()).collect())
}

/// コマンドの実行結果を文字列として取得する
fn read_stdout(output: Output) -> Result<String> {
    if output.status.success() {
        let stdout = String::from_utf8_lossy(&output.stdout).to_string();
        Ok(stdout)
    } else {
        let stderr = String::from_utf8_lossy(&output.stderr).to_string();
        Err(anyhow::anyhow!(stderr))
    }
}

/// コマンドが正常終了したかどうかをチェックする
fn check_return_code(output: Output) -> Result<()> {
    if output.status.success() {
        Ok(())
    } else {
        let stderr = String::from_utf8_lossy(&output.stderr).to_string();
        Err(anyhow::anyhow!(stderr))
    }
}
